const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

// Your postcode lists
const mobile_service_postcode = [
    '4000', '4001', '4002', '4005', '4006', '4007', '4008', '4009', '4010', '4011',
    '4012', '4013', '4014', '4017', '4018', '4029', '4030', '4031', '4032', '4034',
    '4035', '4036', '4037', '4051', '4053', '4054', '4055', '4059', '4060', '4061',
    '4064', '4065', '4066', '4067', '4068', '4069', '4070', '4306', '4500', '4501',
    '4503', '4509', '4520', '4019', '4020', '4021', '4022', '4502', '4504', '4505',
    '4506', '4508', '4509', '4510', '4511', '4516', '4517', '4518', '4519', '4550',
    '4551', '4553', '4554', '4555', '4556', '4557', '4558', '4559', '4560', '4561',
    '4564', '4572', '4573', '4575', '4073', '4074', '4075', '4076', '4077', '4078',
    '4101', '4102', '4103', '4104', '4105', '4106', '4107', '4108', '4109', '4110',
    '4111', '4112', '4113', '4114', '4115', '4116', '4117', '4118', '4119', '4120',
    '4121', '4122', '4123', '4124', '4125', '4127', '4128', '4131', '4132', '4133',
    '4151', '4152', '4169', '4170', '4171', '4172', '4178', '4179', '4205', '4207',
    '4208', '4280', '4300', '4301', '4303', '4304', '4305', '4306', '4127', '4128',
    '4129', '4130', '4153', '4154', '4155', '4156', '4157', '4158', '4159', '4160',
    '4161', '4163', '4164', '4165', '4173', '4174', '4178', '4179', '4207', '4208',
    '4209', '4210', '4211', '4212', '4213', '4214', '4215', '4216', '4217', '4218',
    '4219', '4220', '4221', '4222', '4223', '4224', '4225', '4226', '4227', '4228',
    '4229', '4230', '3000', '3002', '3003', '3004', '3005', '3006', '3008', '3010',
    '3011', '3012', '3013', '3015', '3016', '3018', '3019', '3020', '3021', '3022',
    '3023', '3025', '3026', '3027', '3028', '3031', '3032', '3033', '3034', '3036',
    '3037', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047',
    '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3054', '3055', '3055',
    '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3064', '3064', '3065',
    '3066', '3067', '3068', '3070', '3071', '3072', '3073', '3074', '3075', '3076',
    '3078', '3079', '3081', '3082', '3083', '3084', '3085', '3086', '3087', '3088',
    '3093', '3094', '3101', '3102', '3103', '3104', '3105', '3107', '3108', '3121',
    '3122', '3123', '3124', '3125', '3126', '3127', '3128', '3129', '3130', '3131',
    '3133', '3141', '3142', '3143', '3144', '3145', '3146', '3147', '3148', '3149',
    '3150', '3151', '3152', '3161', '3162', '3163', '3165', '3166', '3167', '3168',
    '3169', '3170', '3171', '3172', '3173', '3174', '3175', '3177', '3178', '3179',
    '3180', '3181', '3182', '3183', '3184', '3185', '3186', '3187', '3188', '3189',
    '3190', '3191', '3192', '3193', '3194', '3195', '3196', '3197', '3198', '3199',
    '3200', '3201', '3202', '3204', '3205', '3206', '3207', '3750', '3753', '3800',
    '3802', '3803', '3805', '3910', '3911', '3930', '3931', '3933', '3934', '3936',
    '3938', '3940', '3942', '3943', '3975', '3976', '3977', '2000', '2006', '2007',
    '2008', '2009', '2010', '2011', '2015', '2016', '2017', '2018', '2019', '2020',
    '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030',
    '2031', '2032', '2033', '2034', '2035', '2036', '2037', '2038', '2039', '2040',
    '2041', '2042', '2043', '2044', '2045', '2046', '2047', '2048', '2049', '2050',
    '2052', '2055', '2060', '2061', '2062', '2063', '2064', '2065', '2066', '2067',
    '2068', '2069', '2070', '2071', '2072', '2073', '2074', '2075', '2076', '2077',
    '2084', '2085', '2086', '2087', '2088', '2089', '2090', '2092', '2093', '2094',
    '2095', '2096', '2097', '2099', '2100', '2101', '2102', '2103', '2104', '2105',
    '2106', '2107', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2116',
    '2117', '2118', '2119', '2120', '2121', '2122', '2123', '2125', '2126', '2127',
    '2128', '2130', '2131', '2132', '2133', '2134', '2135', '2136', '2137', '2138',
    '2139', '2140', '2141', '2142', '2143', '2144', '2145', '2146', '2147', '2148',
    '2150', '2151', '2152', '2153', '2154', '2155', '2156', '2157', '2158', '2160',
    '2161', '2162', '2163', '2164', '2165', '2166', '2167', '2168', '2170', '2171',
    '2172', '2173', '2174', '2175', '2176', '2177', '2178', '2179', '2190', '2191',
    '2192', '2193', '2194', '2195', '2196', '2197', '2198', '2199', '2200', '2203',
    '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213',
    '2214', '2216', '2217', '2218', '2219', '2220', '2221', '2222', '2223', '2224',
    '2225', '2226', '2227', '2228', '2229', '2230', '2231', '2232', '2234', '2555',
    '2556', '2557', '2558', '2559', '2564', '2565', '2566', '2567', '2745', '2747',
    '2748', '2749', '2750', '2755', '2756', '2759', '2760', '2761', '2762', '2763',
    '2765', '2766', '2767', '2768', '2769', '2770', '5108', '5109', '5110', '5111',
    '5112', '5113', '5114', '5115', '5116', '5117', '5121', '5125', '5126', '5127',
    '5000', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013',
    '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023',
    '5024', '5025', '5031', '5032', '5033', '5034', '5035', '5037', '5038', '5039',
    '5040', '5042', '5043', '5044', '5045', '5046', '5048', '5061', '5063', '5064',
    '5065', '5066', '5067', '5068', '5069', '5070', '5071', '5072', '5073', '5074',
    '5075', '5076', '5081', '5082', '5083', '5084', '5085', '5086', '5087', '5088',
    '5090', '5092', '5093', '5094', '5095', '5096', '5098', '5106', '5107', '5950',
    '5047', '5049', '5050', '5051', '5158', '5159', '5160', '5161', '5162', '5163',
    '5164', '5165', '5166', '5167', '5168', '5169', 
    '2628', '1928', '2695', '1942', '1948', '2675', '1944', '3019', '1012',
    '3034', '1003', '1005', '1151', '2611', '1925', '1121', '1170', '1048',
    '1956', '3038', '1116', '1059', '2653', '1943', '2613', '1153', '3007',
    '1021', '2681', '2618', '3037', '3044'
];

// const mobile_service_sa_region = [
//     '2628', '1928', '2695', '1942', '1948', '2675', '1944', '3019', '1012',
//     '3034', '1003', '1005', '1151', '2611', '1925', '1121', '1170', '1048',
//     '1956', '3038', '1116', '1059', '2653', '1943', '2613', '1153', '3007',
//     '1021', '2681', '2618', '3037', '3044'
// ];

const within_mobile_fitting_region = [
    '1013', '1017', '1027', '1031', '1032', '1047', '1060', '1062', '1063', '1067',
    '1101', '1108', '1120', '1125', '1133', '1140', '1148', '1150', '1159', '1177',
    '1178', '1186', '1778', '1781', '1783', '1784', '1800', '1803', '1813', '1817',
    '1818', '1822', '1825', '1838', '1839', '2606', '2614', '2637', '2641', '2664',
    '2666', '2923', '2925', '2931', '2934', '2937', '3009', '3018', '1076', '1058',
    '1155', '2643', '2663', '1075', '1123', '2927', '1603', '1617', '1608', '1606',
    '1637', '1572', '1533', '1594', '1579', '1656', '1597', '1596', '3014', '3008',
    '1077', '2679', '1130', '1042', '1141', '2069', '2686', '1131', '2610', '1093',
    '2924', '1030', '1581', '2689', '2670', '1097', '2652', '1078', '3006', '1161',
    '1035', '3016', '2667', '2624', '2642', '1095', '2650', '1085', '2671', '1014',
    '2698', '6832', '6711', '3002', '6776', '6792', '6814', '3026', '6747', '6749',
    '6709', '3017', '6755', '6797', '2910', '6794', '2618', '1043', '2928', '2648',
    '1106', '2629', '2682', '2676', '2665', '2617', '2932', '2639', '2660', '1053',
    '2625', '1044', '2621', '3029', '1138', '1026', '2649', '2936', '1157', '3025',
    '2662', '2690', '2067', '1163', '2607', '1136', '2604', '1191', '1154', '2651',
    '2630', '2631', '2608', '3015', '1171'
];

// Convert arrays to Sets for faster lookup
const postcodeListsMap = {
    'mobile_service': new Set(mobile_service_postcode),
    // 'sa_region': new Set(mobile_service_sa_region),
    'fitting_region': new Set(within_mobile_fitting_region)
};

// Middleware
app.use(express.json());

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Main endpoint to check postcode in a specific list
app.get('/check-postcode', (req, res) => {
    const { postcode, list } = req.query;
    
    // Validate required parameters
    if (!postcode) {
        return res.status(400).json({
            success: false,
            error: 'Missing required parameter: postcode'
        });
    }
    
    if (!list) {
        return res.status(400).json({
            success: false,
            error: 'Missing required parameter: list',
            availableLists: Object.keys(postcodeListsMap)
        });
    }
    
    // Validate list parameter
    if (!postcodeListsMap[list]) {
        return res.status(400).json({
            success: false,
            error: `Invalid list parameter. Available lists: ${Object.keys(postcodeListsMap).join(', ')}`
        });
    }
    
    // Check if postcode exists in the specified list
    const exists = postcodeListsMap[list].has(postcode.toString());
    
    res.json({
        success: true,
        postcode: postcode,
        list: list,
        exists: exists
    });
});

// Endpoint to check postcode in all lists
app.get('/check-postcode-all', (req, res) => {
    const { postcode } = req.query;
    
    if (!postcode) {
        return res.status(400).json({
            success: false,
            error: 'Missing required parameter: postcode'
        });
    }
    
    const results = {};
    for (const [listName, postcodeSet] of Object.entries(postcodeListsMap)) {
        results[listName] = postcodeSet.has(postcode.toString());
    }
    
    res.json({
        success: true,
        postcode: postcode,
        results: results
    });
});

// Get list information
app.get('/lists', (req, res) => {
    const listInfo = {};
    for (const [listName, postcodeSet] of Object.entries(postcodeListsMap)) {
        listInfo[listName] = {
            name: listName,
            count: postcodeSet.size
        };
    }
    
    res.json({
        success: true,
        lists: listInfo
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        success: false,
        error: 'Something went wrong!'
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint not found'
    });
});

// Start server
app.listen(port, () => {
    console.log(`Postcode checker API running on port ${port}`);
    console.log(`Available endpoints:`);
    console.log(`- GET /health - Health check`);
    console.log(`- GET /check-postcode?postcode=XXXX&list=LIST_NAME - Check postcode in specific list`);
    console.log(`- GET /check-postcode-all?postcode=XXXX - Check postcode in all lists`);
    console.log(`- GET /lists - Get information about available lists`);
});

module.exports = app;